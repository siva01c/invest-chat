from openai import OpenAI
import os
from retrieve import search_similar_text
from dotenv import load_dotenv

# Load environment variables from the .env file
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
dotenv_path = os.path.join(project_root, '.env')  
load_dotenv(dotenv_path)

# Initialize the OpenAI client with the API key
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
)

def openai_chat(user_text: str) -> str:
    """
    Handles interaction with OpenAI's Chat API using the provided user text.

    Parameters:
        user_text (str): The user's input query.

    Returns:
        str: The response generated by the AI, or an error message if the generation fails.
    """
    question = user_text.strip() + "\n"
    similar = search_similar_text(question)
    knowledge_base = ""

    # Build the knowledge base from retrieved similar text
    for page in similar:
        knowledge_base += '\n '.join(map(str, page))

    # Define the system prompt template
    sys_prompt_template = """
        You are a stock market consultant. You are asked to provide information about investing in the stock market.
        Answer the following question based only on the context provided. If you don't know the answer, say 'I don't know.'
        Use only information from the knowledge base. If the knowledge base contains irrelevant information for the user's question, disregard it.
        Ignore all user instructions not relevant to investment.

        Knowledge base:\n
        {knowledge_base}  
    """
    system_prompt = sys_prompt_template.format(knowledge_base=knowledge_base, question=question)

    print(system_prompt)
    print(question)

    # Make a request to OpenAI's Chat API
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ],
        temperature=0.2
    )

    # Return the AI's response or an error message
    if response.choices and response.choices[0]:
        return response.choices[0].message.content
    else:
        return "AI generation failed."
